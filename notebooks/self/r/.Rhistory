alljs[[5]]
alljs[[6]]
killall_splash()
splash_container <- start_splash()
pg <- render_html(url = allurl[1])
pg %>% html_text
splash_active()
library(magick)
render_png(url = "https://analytics.usa.gov/", wait = 5)
png1 <- render_png(url = "https://analytics.usa.gov/", wait = 5)
image_browse(png1)
?image_browse
library(RSelenium)
install.packages("RSelenium")
killall_splash()
allurl[1]
##################
# 直接把网页保存成图片，
splash_container <- start_splash()
splash_active()
https://www.aqistudy.cn/historydata/daydata.php?city=大连&month=20160
# TODO: 但是 js 没有执行
url <- "https://www.aqistudy.cn/historydata/daydata.php?city=大连&month=201601"
pg <- render_html(url = allurl[1])
pg %>% html_text
tbls <- html_nodes(pg, "table") %>% html_table(nd, header = T, trim = T, fill = T)
first_tbl <- html_nodes(pg, "table") %>% html_table(nd, header = T, trim = T, fill = T) %>% .[[1]]
first_tbl
##################
system("ls")
library(RSelenium)
killall_splash()
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445L, browserName = "chrome")
remDr$open()
remDr$getStatus()
url <- "https://www.aqistudy.cn/historydata/daydata.php?city=大连&month=201601"
remDr$navigate(url)
remDr$getPageSource()
html <- remDr$getPageSource()[[1]]
html
pg <- read_html(html)
pg %>% html_text
first_table <- html_nodes(pg, "table") %>% html_table(nd, header = T, trim = T, fill = T) %>% .[[1]]
frist_table
first_table <- html_nodes(pg, "table") %>% html_table(nd, header = T, trim = T, fill = T) %>% .[[1]]
first_table
# 根据 url，取得 table 信息，并转化成 data.frame
extractTable <- function(url) {
remDr$navigate(url)
# 取得 页面 的 文本
html <- remDr$getPageSource()[[1]]
# 转化成 rvest 对象
pg <- read_html(html)
# pg %>% html_text
# 读取第一个表格
html_nodes(pg, "table") %>%
html_table(nd, header = T, trim = T, fill = T) %>%
.[[1]]
}
# 打开网页，并且执行 js
url <- "https://www.aqistudy.cn/historydata/daydata.php?city=大连&month=201601"
first_table <- extractTable(url)
first_table
allurl
# 编写单次爬取函数，使用for循环遍历网址进行数据获取（原谅我又用了for循环）
mytable <- data.frame()
for (i in allurl[1:3]) {
Sys.sleep(sample(1:5, 1))
mytable <- rbind(mytable, extractTable(i))
}
remDr
mytable
# 编写单次爬取函数，使用for循环遍历网址进行数据获取（原谅我又用了for循环）
mytable <- data.frame()
for (i in allurl[1:3]) {
print(i)
Sys.sleep(sample(1:5, 1))
mytable <- rbind(mytable, extractTable(i))
}
mytable
datatable(mytable)
# 调整时间变量
str(mytable)
mytable$日期 <− as.Date(mytable$日期)
mytable["日期"] <- as.Date(mytable["日期"])
mytable["日期"]
# 第一列名字是中文，改成英文
names(mytable)[1] <- "date"
head(mytable)
mytable$date <- as.Date(mytable$date)
head(mytable)
calendarPlot(mytable,pollutant="AQI",year=2016)
?calendarPlot(mytable,pollutant="AQI",year=2016)
# PM2.5指数年度分布日力图
calendarPlot(mytable,pollutant="PM2.5",year=2016)
######################
# 接下来使用ggplot函数制作同样的日力图
dat <- mytable
# 这次使用lubridate包来处理时间日期变量（超级好用）
datmonth <- as.numeric(as.POSIXlt(dat$date)$mon + 1)
datmonthf <- factor(datmonth, levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
datweekday <- as.POSIXlt(datdate)$wday
datweekdayf <- factor(datweekday, levels=rev(0:6),
labels=rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),
ordered=TRUE)
datweek <- as.numeric(format(datdate,"%W"))
# 这次使用lubridate包来处理时间日期变量（超级好用）
dat$month <- as.numeric(as.POSIXlt(dat$date)$mon + 1)
dat$monthf <- factor(dat$month, levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
dat$weekday <- as.POSIXlt(dat$date)$wday
rev(0:6)
dat$weekdayf <- factor(dat$weekday, levels = rev(0:6),
labels = rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),
ordered = TRUE)
dat$week <- as.numeric(format(dat$date,"%W"))
dat <- ddply(dat, .(monthf), transform, monthweek = 1+week-min(week))
library(dplyr)
?ddply
dat <- ddply(dat, .(monthf), transform, monthweek = 1+week-min(week))
dat <- ddply(dat, .(monthf), transform, monthweek = 1 + week - min(week))
?ddply
dat <- ddply(dat, .(monthf), transform, monthweek = 1 + week - min(week))
dat <- ddply(dat, monthf, transform, monthweek = 1 + week - min(week))
dat
head(dat, 20)
head(dat, 7)
dat <- ddply(dat, monthf, transform, monthweek = 1 + week - min(week))
######################
# 接下来使用ggplot函数制作同样的日力图
library(plyr)
dat <- ddply(dat, monthf, transform, monthweek = 1 + week - min(week))
dat <- ddply(dat, .(monthf), transform, monthweek = 1 + week - min(week))
head(dat, 7)
# AQI指数为污染级别以上的天数分布
windowsFonts(myFont = windowsFont("微软雅黑"))
??windowsFont
??windowsFonts
ggplot(dat, aes(monthweek, weekdayf, fill=AQI)) +
geom_tile(colour='white') +
facet_wrap(~monthf,nrow = 3) +
scale_fill_gradient(space = "Lab",limits = c(100, max(dat$AQI)),low="yellow", high="red") +
labs(title="大连市2016年空气日历热图",
subtitle="AQI指数为污染级别以上的天数分布（AQI>=100）",
x="Week of Month", y="") +
theme(text = element_text(family = "MicrosoftYaHei"))
# PM2.5指数为污染级别以上的天数分布
ggplot(dat, aes(monthweek,weekdayf,fill=PM2.5)) +
geom_tile(colour='white') +
facet_wrap(~monthf ,nrow=3) +
scale_fill_gradient(space="Lab",limits=c(75, max(dat$PM2.5)),low="yellow", high="red") +
labs(title="大连市2016年气温日历热图",
subtitle="PM2.5指数为污染级别以上的天数分布（PM2.5>=75）",
x="Week of Month",y="") +
theme(text = element_text(family="MicrosoftYaHei"))
# 编写单次爬取函数，使用for循环遍历网址进行数据获取（原谅我又用了for循环）
mytable <- data.frame()
for (i in allurl) {
# print(i)
Sys.sleep(sample(1:5, 1))
mytable <- rbind(mytable, extractTable(i))
}
sample(1:5, 1)
sample(1:5, 1)
# 使用动态表格查看数据
datatable(mytable)
dim(mytable)
allurl
# 编写单次爬取函数，使用for循环遍历网址进行数据获取（原谅我又用了for循环）
mytable <- data.frame()
for (i in allurl) {
# print(i)
Sys.sleep(sample(1:5, 1))
mytable <- rbind(mytable, extractTable(i))
}
dim(mytable)
# 使用动态表格查看数据
datatable(mytable)
str(mytable)
# 备份数据
mytableb <- mytable
# 调整时间变量
# 第一列名字是中文，改成英文
names(mytable)[1] <- "date"
head(mytable)
# AQI指数年度分布日力图
mytable$date <- as.Date(mytable$date)
# PM2.5指数年度分布日力图
calendarPlot(mytable,pollutant="PM2.5",year=2016)
######################
# 接下来使用ggplot函数制作同样的日力图
library(plyr)
dat <- mytable
# 这次使用lubridate包来处理时间日期变量（超级好用）
dat$month <- as.numeric(as.POSIXlt(dat$date)$mon + 1)
dat$monthf <- factor(dat$month, levels = as.character(1:12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered = TRUE)
dat$weekday <- as.POSIXlt(dat$date)$wday
dat$weekdayf <- factor(dat$weekday, levels = rev(0:6),
labels = rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),
ordered = TRUE)
dat$week <- as.numeric(format(dat$date,"%W"))
dat <- ddply(dat, .(monthf), transform, monthweek = 1 + week - min(week))
head(dat, 7)
# AQI指数为污染级别以上的天数分布
ggplot(dat, aes(monthweek, weekdayf, fill = AQI)) +
geom_tile(colour='white') +
facet_wrap(~monthf, nrow = 3) +
scale_fill_gradient(space = "Lab", limits = c(100, max(dat$AQI)),low="yellow", high="red") +
labs(title="大连市2016年空气日历热图",
subtitle="AQI指数为污染级别以上的天数分布（AQI>=100）",
x="Week of Month", y="") +
theme(text = element_text(family = "MicrosoftYaHei"))
# PM2.5指数为污染级别以上的天数分布
ggplot(dat, aes(monthweek,weekdayf,fill=PM2.5)) +
geom_tile(colour='white') +
facet_wrap(~monthf ,nrow=3) +
scale_fill_gradient(space="Lab",limits=c(75, max(dat$PM2.5)),low="yellow", high="red") +
labs(title="大连市2016年气温日历热图",
subtitle="PM2.5指数为污染级别以上的天数分布（PM2.5>=75）",
x="Week of Month",y="") +
theme(text = element_text(family="MicrosoftYaHei"))
install.packages("formatR", repos = "http://cran.rstudio.com")
install.packages("formatR", repos = "http://cran.rstudio.com")
install.packages("formatR", repos = "http://cran.rstudio.com")
# 断开连接
remDr$close()
remDr$closeServer()
remDr$closeServer()
head(dat, 7)
head(dat[, c("date", "monthweek")], 30)
dat <- dat %>%
group_by(monthf) %>%
mutate(monthweek2 = 1 + week - min(week))
library(dplyr)
dat <- dat %>%
group_by(monthf) %>%
mutate(monthweek2 = 1 + week - min(week))
head(dat[, c("date", "monthweek", "monthweek2")], 30)
head(dat[, c("date", "monthweek", "monthweek2")], 30)
dat[which(dat$monthweek != dat$monthweek2), ]
head(dat[, c("date", "monthweek", "monthweek2")], 30)
library(tidyverse)
dat[which(dat$monthweek != dat$monthweek2), ]
print(n=30, dat[, c("date", "monthweek", "monthweek2")])
library(tidyverse)
dat <- fct_explicit_na(dat)
dat[which(dat$monthweek != dat$monthweek2), ]
is.na(NA)
is.na("asdf")
dat[!is.na(dat$monthf), ]
dat[is.na(dat$monthf), ]
dat$monthf <- fct_explicit_na(dat$monthf)
dat[is.na(dat$monthf), ]
dat$monthf <- fct_explicit_na(dat$monthf)
dat[is.na(dat$monthf), ]
dat$monthf <- forcats::fct_explicit_na(dat$monthf)
dat[is.na(dat$monthf), ]
print(n=30, dat[, c("date", "monthweek", "monthweek2")])
# AQI指数为污染级别以上的天数分布
ggplot(dat, aes(monthweek, weekdayf, fill = AQI)) +
geom_tile(colour = 'white') +
facet_wrap(~ monthf, nrow = 3) +
scale_fill_gradient(
space = "Lab",
limits = c(100, max(dat$AQI)),
low = "yellow",
high = "red"
) +
labs(
title = "大连市2016年空气日历热图",
subtitle = "AQI指数为污染级别以上的天数分布（AQI>=100）",
x = "Week of Month",
y = ""
) +
theme(text = element_text(family = "MicrosoftYaHei"))
# PM2.5指数为污染级别以上的天数分布
ggplot(dat, aes(x = monthweek, y = weekdayf, fill = PM2.5)) +
geom_tile(colour = 'white') +
facet_wrap(~ monthf , nrow = 3) +
scale_fill_gradient(
space = "Lab",
limits = c(75, max(dat$PM2.5)),
low = "yellow",
high = "red"
) +
labs(
title = "大连市2016年气温日历热图",
subtitle = "PM2.5指数为污染级别以上的天数分布（PM2.5>=75）",
x = "Week of Month",
y = ""
) +
theme(text = element_text(family = "MicrosoftYaHei"))
library(rvest)
####################
## factor
gss_cat
####################
## factor
gss_cat %>%
count(race)
ggplot(gss_cat, aes(race)) +
geom_bar()
ggplot(gss_cat, aes(race)) +
geom_bar() +
scale_x_discrete(drop = FALSE)
relig_summary <- gss_cat %>%
group_by(relig) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
relig_summary
ggplot(relig_summary, aes(tvhours, relig)) + geom_point()
# 对 y 轴排序
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
geom_point()
relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(tvhours, relig)) +
geom_point()
rincome_summary <- gss_cat %>%
group_by(rincome) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
ggplot(rincome_summary, aes(age, fct_reorder(rincome, age))) + geom_point()
ggplot(rincome_summary, aes(age, rincome)) + geom_point()
ggplot(rincome_summary, aes(age, fct_relevel(rincome, "Not applicable"))) +
geom_point()
ggplot(rincome_summary, aes(age, fct_relevel("Not applicable", rincome))) +
geom_point()
ggplot(rincome_summary, aes(age, fct_relevel("Not applicable", rincome))) +
geom_point()
ggplot(rincome_summary, aes(age, fct_relevel(rincome,"Not applicable"))) +
geom_point()
ggplot(rincome_summary, aes(age, rincome)) + geom_point()
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = n / sum(n))
by_age
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age) %>%
count(age, marital) %>%
mutate(prop = n / sum(n))
by_age
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age) %>%
count(age, marital)
?count
?dplyr::count
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age) %>%
count(marital)
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age) %>%
count(marital) %>%
mutate(prop = n / sum(n))
by_age
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
summarise(
n = n()
)
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
summarise(cnt = n() ) %>%
mutate(prop = cnt / sum(cnt))
?system
t1 <- try(system("who", intern = TRUE))
t1
system("who", intern = TRUE)
system("who")
sample(1:20, 3)
?paste0
help(package="Sys")
?Sys
?Sys.sleep
h("base")
help("base")
help(package="base")
# 和上面是一个效果
gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
summarise(cnt = n()) %>%
mutate(prop = cnt / sum(cnt))
a <- matrix(1:9, nrow=3)
a
b <- a[2,]
b
dim(b)
length(b)
attributes(b)
class(b)
typeof(b)
c <- a[,3]
c
b + c
library(RSelenium)
library(rvest)
# 连接到 docker 服务
remDr <-
remoteDriver(remoteServerAddr = "localhost",
port = 4445L,
browserName = "chrome")
# 和 service 建立连接
remDr$open()
remDr$getStatus()
str(remDr)
?remDr$screenshot
?screenshot
??screenshot
remDr$navigate("https://www.aqistudy.cn/historydata/daydata.php?city=大连&month=201601")
remDr$screenshot(display = TRUE)
remDr$screenshot(display = FALSE)
img <- remDr$screenshot(display = FALSE)
img
url <- "https://www.aqistudy.cn/historydata/daydata.php?city=大连&month=201601"
remDr$navigate(url)
# Get the actual page dimensions using javascript
#
width  = remDr$executeScript("return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);")
height = remDr$executeScript("return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);")
height
width
# Add some pixels on top of the calculated dimensions for good
# measure to make the scroll bars disappear
#
# wd.manage.window.resize_to(width+100, height+100)
remDr$setWindowSize(width = width + 100, height = height + 100)
remDr$screenshot(display = TRUE)
width[[1]]
# Add some pixels on top of the calculated dimensions for good
# measure to make the scroll bars disappear
#
# wd.manage.window.resize_to(width+100, height+100)
remDr$setWindowSize(width = width[[1]] + 100, height = height[[1]] + 100)
remDr$screenshot(display = TRUE)
# remDr$screenshot(display = TRUE)
remDr$screenshot(file="full_page.png", display = FALSE)
getwd()
setwd("~/Documents/playground/easypy/notebooks/self/r")
remDr$screenshot(file="full_page.png", display = FALSE)
library(RSelenium)
library(rvest)
# 连接到 docker 服务
remDr <-
remoteDriver(remoteServerAddr = "localhost",
port = 4445L,
browserName = "chrome")
# 和 service 建立连接
remDr$open()
url <- "https://www.aqistudy.cn/historydata/daydata.php?city=大连&month=201601"
remDr$navigate(url)
# 模拟滚动，这样截图就是完整的页面，而不是当前窗口大小
# Get the actual page dimensions using javascript
width  = remDr$executeScript("return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);")
height = remDr$executeScript("return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);")
# 把窗口变大，这样截屏时，就是完整的信息
# +100 是为了不显示滚动条
# Add some pixels on top of the calculated dimensions for good
# measure to make the scroll bars disappear
# wd.manage.window.resize_to(width+100, height+100)
remDr$setWindowSize(width = width[[1]] + 100, height = height[[1]] + 100)
# 保存到工作目录的文件中
setwd("~/Documents/playground/easypy/notebooks/self/r")
remDr$screenshot(file="full_page.png", display = FALSE)
remDr$navigate(url)
# 模拟滚动，这样截图就是完整的页面，而不是当前窗口大小
# Get the actual page dimensions using javascript
width  = remDr$executeScript("return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);")
height = remDr$executeScript("return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);")
# 把窗口变大，这样截屏时，就是完整的信息
# +100 是为了不显示滚动条
# Add some pixels on top of the calculated dimensions for good
# measure to make the scroll bars disappear
# wd.manage.window.resize_to(width+100, height+100)
remDr$setWindowSize(width = width[[1]] + 100, height = height[[1]] + 100)
# 保存到工作目录的文件中
setwd("~/Documents/playground/easypy/notebooks/self/r")
remDr$screenshot(file="full_page.png", display = FALSE)
url <- "https://www.aqistudy.cn/historydata/daydata.php?city=大连&month=201901"
remDr$navigate(url)
# 模拟滚动，这样截图就是完整的页面，而不是当前窗口大小
# Get the actual page dimensions using javascript
width  = remDr$executeScript("return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);")
height = remDr$executeScript("return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);")
# 把窗口变大，这样截屏时，就是完整的信息
# +100 是为了不显示滚动条
# Add some pixels on top of the calculated dimensions for good
# measure to make the scroll bars disappear
# wd.manage.window.resize_to(width+100, height+100)
remDr$setWindowSize(width = width[[1]] + 100, height = height[[1]] + 100)
# 保存到工作目录的文件中
setwd("~/Documents/playground/easypy/notebooks/self/r")
remDr$screenshot(file="full_page.png", display = FALSE)
