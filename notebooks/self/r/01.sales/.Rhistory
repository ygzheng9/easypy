df1 <- dbGetQuery(con, "
select a.vendor_name, a.company, a.mat_name,
a.item_qty, a.amt,
cast(a.amt / a.item_qty as decimal(20,2)) unit_price
from (
select a.vendor_name, a.company, a.mat_name,
sum(a.item_qty) item_qty,
sum(a.unit_price * a.item_qty) amt
from po_items a
where a.vendor_name in ('杭州天元诚达装饰材料有限公司', '杭州添丽装饰纸有限公司','英特普莱特（中国）装饰材料有限公司')
group by a.vendor_name, a.company, a.mat_name
) a
")
head(df1)
ggplot(data = df1, aes(x=company, y= unit_price)) +
geom_boxplot(aes(fill=vendor_name)) +
scale_fill_brewer("供应商", palette="Accent") +
theme(text = element_text(family = "STSongti-SC-Black")) +
# theme(plot.title = element_text(size=26, face="bold", hjust=0, color="#666666")) +
theme(axis.title = element_text(size=10,  face="bold", color="#666666")) +
# theme(axis.title.y = element_text(angle=0, vjust = 0.5)) +
theme(legend.title = element_text(size=8)) +
theme(legend.text = element_text(size=6)) +
theme(legend.position = "bottom") +
xlab("工厂") + ylab("采购单价")
ggplot(data = df1, aes(x=company, y= unit_price)) +
geom_boxplot(aes(fill=vendor_name)) +
scale_fill_brewer("供应商", palette="Accent") +
theme(text = element_text(family = "STSongti-SC-Black")) +
# theme(plot.title = element_text(size=26, face="bold", hjust=0, color="#666666")) +
theme(axis.title = element_text(size=10,  face="bold", color="#666666")) +
# theme(axis.title.y = element_text(angle=0, vjust = 0.5)) +
theme(legend.title = element_text(size=8)) +
theme(legend.text = element_text(size=6)) +
theme(legend.position = "bottom") +
xlab("工厂") + ylab("采购单价")
ggplot(data = df1, aes(x=company, y= unit_price)) +
geom_boxplot(aes(fill=vendor_name)) +
scale_fill_brewer("供应商", palette="Accent") +
theme(text = element_text(family = "STSongti-SC-Black")) +
# theme(plot.title = element_text(size=26, face="bold", hjust=0, color="#666666")) +
theme(axis.title = element_text(size=10,  face="bold", color="#666666")) +
# theme(axis.title.y = element_text(angle=0, vjust = 0.5)) +
theme(legend.title = element_text(size=8)) +
theme(legend.text = element_text(size=6)) +
theme(legend.position = "bottom") +
xlab("工厂") + ylab("采购单价")
ggplot(data = df1, aes(x=company, y= item_qty)) +
geom_boxplot(aes(fill=vendor_name)) +
scale_fill_brewer("供应商", palette="Accent") +
theme(text = element_text(family = "STSongti-SC-Black")) +
# theme(plot.title = element_text(size=26, face="bold", hjust=0, color="#666666")) +
theme(axis.title = element_text(size=10,  face="bold", color="#666666")) +
# theme(axis.title.y = element_text(angle=0, vjust = 0.5)) +
theme(legend.title = element_text(size=8)) +
theme(legend.text = element_text(size=6)) +
theme(legend.position = "bottom") +
xlab("工厂") + ylab("采购量")
# 高密度板的采购量
df1 <- dbGetQuery(con, "
select a.company, a.vendor_name,sum(a.item_qty) qty
from po_items a
where 1 = 1
-- and a.company = '阜阳工厂'
and a.mat_name like '%高密度板%'
group by a.company, a.vendor_name
order by a.company, a.vendor_name;
")
# 高密度板的采购量 热度图：供应商 ~ 工厂
ggplot(data=df1, aes(x = company, y = vendor_name, z=qty)) +
stat_summary_2d(fun=function(x) x/10000)  +
theme(text = element_text(family = "STSongti-SC-Black")) +
# theme(plot.title = element_text(size=26, face="bold", hjust=0, color="#666666")) +
theme(axis.title = element_text(size=8,  face="bold", color="#666666")) +
# theme(axis.title.y = element_text(angle=0, vjust = 0.5)) +
theme(legend.title = element_text(size=8)) +
theme(legend.text = element_text(size=6)) +
theme(legend.position = "bottom") +
scale_fill_distiller("采购量", palette=2, direction=1) +
xlab(label = "工厂") +
ylab(label = "供应商")
library(devtools)
install_github("rapporter/pander")
install_github("dcomtois/summarytools")
shiny::runApp('Documents/playground/easypy/notebooks/self/r/01.sales')
runApp('Documents/playground/easypy/notebooks/self/r/01.sales')
runApp('Documents/playground/easypy/notebooks/self/r/01.sales')
runApp()
runApp()
shiny::runApp('Documents/playground/easypy/notebooks/self/r/01.sales')
runApp()
shiny::runApp('Documents/playground/easypy/notebooks/self/r/01.sales')
runApp('Documents/playground/easypy/notebooks/self/r/01.sales')
runApp('Documents/playground/easypy/notebooks/self/r/01.sales')
shiny::runApp()
runApp()
source('../01.salesApp.R')
source('app.R')
?runApp
source('app.R')
runApp()
runApp()
library(readxl)
library(tidyverse)
setwd("~/Documents/playground/easypy/notebooks/self")
getwd()
# read from excel file
df1 <-  read_excel("./dataset/pd_sales.xlsx", sheet = "Sheet1")
names(df1)
# 转换成数字
df1$YR2016 = as.numeric(df1$YR2016)
df1$YR2017 = as.numeric(df1$YR2017)
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
QTY1 = sum(YR2016),
QTY2 = sum(YR2017),
no1 = max(YR2017)
) %>%
arrange(desc(QTY2))
df2
myFunc <-  function(x) {
u <- unique(x)
s <- sort(u, decreasing = TRUE)
n <- nrow(s)
if (n == 1) {
1
}
if (n == 2) {
s[1L] / s[2L]
} else {
s[1L] / (s[2L] + s[3L])
}
}
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
QTY1 = sum(YR2016),
QTY2 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(QTY2))
myFunc <-  function(x) {
u <- unique(x)
s <- sort(u, decreasing = TRUE)
n <- nrow(s)
if (n == 1) {
1
} else if (n == 2) {
s[1L] / s[2L]
} else {
s[1L] / (s[2L] + s[3L])
}
}
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
QTY1 = sum(YR2016),
QTY2 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(QTY2))
df2
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
QTY1 = sum(YR2016),
QTY2 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(QTY2))
df1
myFunc(df1$YR2017)
myFunc <-  function(x) {
u <- unique(x)
s <- sort(u, decreasing = TRUE)
num <- nrow(s)
if (num <= 1) {
1
} else if (num == 2) {
s[1L] / s[2L]
} else {
s[1L] / (s[2L] + s[3L])
}
}
myFunc(df1$YR2017)
myFunc <-  function(x) {
u <- unique(x)
s <- sort(u, decreasing = TRUE)
num <- nrows(s)
if (num <= 1) {
1
} else if (num == 2) {
s[1L] / s[2L]
} else {
s[1L] / (s[2L] + s[3L])
}
}
myFunc(df1$YR2017)
return(s[1L] / s[2L])
if (num <= 1) {
return(1)
} else if (num == 2) {
return(s[1L] / s[2L])
} else {
s[1L] / (s[2L] + s[3L])
}
myFunc <-  function(x) {
u <- unique(x)
s <- sort(u, decreasing = TRUE)
num <- nrow(s)
if (num <= 1) {
return(1)
} else if (num == 2) {
return(s[1L] / s[2L])
} else {
s[1L] / (s[2L] + s[3L])
}
}
myFunc(df1$YR2017)
c <- df1$YR2017
u <- unique(x)
s <- sort(u, decreasing = TRUE)
s
num <- nrow(s)
num
num <- length(s)
num
df1$YR2017
myFunc <-  function(x) {
s <- sort(x, decreasing = TRUE)
num <- length(s)
if (num <= 1) {
return(1)
} else if (num == 2) {
return(s[1L] / s[2L])
} else {
s[1L] / (s[2L] + s[3L])
}
}
myFunc(df1$YR2017)
myFunc <-  function(x) {
s <- sort(x, decreasing = TRUE)
num <- length(s)
if (num <= 1) {
1
} else if (num == 2) {
s[1L] / s[2L]
} else {
s[1L] / (s[2L] + s[3L])
}
}
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
QTY1 = sum(YR2016),
QTY2 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(QTY2))
df2
# 每个区域：第一名量 / (第二名 + 第三名)
myScore <-  function(x) {
s <- sort(x, decreasing = TRUE)
num <- length(s)
if (num <= 1) {
1
} else if (num == 2) {
s[1L] / s[2L]
} else {
s[1L] / (s[2L] + s[3L])
}
}
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
QTY1 = sum(YR2016),
QTY2 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(QTY2))
df2
runApp('r/01.sales')
shiny::runApp()
library(readxl)
library(tidyverse)
setwd("~/Documents/playground/easypy/notebooks/self")
library(readxl)
library(tidyverse)
setwd("~/Documents/playground/easypy/notebooks/self")
getwd()
# read from excel file
df1 <-  read_excel("./dataset/pd_sales.xlsx", sheet = "Sheet1")
names(df1)
# 转换成数字
df1$YR2016 = as.numeric(df1$YR2016)
df1$YR2017 = as.numeric(df1$YR2017)
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
QTY1 = sum(YR2016),
QTY2 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(QTY2))
df2
df3 <- gather(df2, key="type", value="qty")
df3
df3 <- gather(df2, key="type", value="qty", -level1)
df3
df3 <- gather(df2, key="year", value="qty", -level1, -n)
df3
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
YR2016 = sum(YR2016),
YR2017 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(QTY2))
df2
df3 <- gather(df2, key="year", value="qty", -level1, -n)
df3
as.character(unique(unlist(df2$level1)))
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
YR2016 = sum(YR2016),
YR2017 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(QTY2))
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
YR2016 = sum(YR2016),
YR2017 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(YR2017))
df2
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
2016 = sum(YR2016),
2017 = sum(YR2017),
no1 = max(YR2017),
score = myFunc(YR2017)
) %>%
arrange(desc(YR2017))
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
"2016" = sum(YR2016),
"2017" = sum(YR2017),
no1 = max(YR2017),
score = myFunc(2017)
) %>%
arrange(desc(YR2017))
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
"2016" = sum(YR2016),
"2017" = sum(YR2017),
no1 = max("2017"),
score = myFunc("2017")
) %>%
arrange(desc(YR2017))
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
"2016" = sum(YR2016),
"2017" = sum(YR2017),
no1 = max("2017"),
score = myFunc("2017")
) %>%
arrange(desc("2017"))
# 按照 level1 汇总
df2 <- df1 %>%
group_by(level1) %>%
summarise(
n = n(),
Y16 = sum(YR2016),
Y17 = sum(YR2017),
score = myFunc(Y17)
) %>%
arrange(desc(Y17))
df2
df3 <- gather(df2, key="year", value="qty", -level1, -n)
df3
df3 <- gather(df1, key="year", value="qty", -level1, -level2)
df3
runApp('r/01.sales')
runApp('r/01.sales')
runApp('r/01.sales')
setwd("~/Documents/playground/easypy/notebooks/self")
getwd()
# read from excel file
df1 <-  read_excel("./dataset/pd_sales.xlsx", sheet = "Sheet1")
names(df1)
# 转换成数字
df1$YR2016 = as.numeric(df1$YR2016)
df1$YR2017 = as.numeric(df1$YR2017)
df1 <- gather(df1, key="year", value="qty", -level1, -level2)
df1
df1 %>%
filter(year == "YR2017") %>%
group_by(level1) %>%
summarise(
n = n(),
total_qty = sum(qty),
score = myFunc(qty)
) %>%
arrange(desc(total_qty))
df1$qty = as.numeric(df1$qty)
df1
df1 %>%
filter(year == "YR2017") %>%
group_by(level1) %>%
summarise(
n = n(),
total_qty = sum(qty),
score = myFunc(qty)
) %>%
arrange(desc(total_qty))
runApp('r/01.sales')
runApp('r/01.sales')
library(readxl)
library(tidyverse)
setwd("~/Documents/playground/easypy/notebooks/self")
getwd()
# read from excel file
df1 <-  read_excel("./dataset/pd_sales.xlsx", sheet = "Sheet1")
names(df1)
# 转换成数字
df1$YR2016 = as.numeric(df1$YR2016)
df1$YR2017 = as.numeric(df1$YR2017)
df1 <- gather(df1, key="year", value="qty", -level1, -level2)
df1$qty = as.numeric(df1$qty)
df1[isNA(df1$qty)]
df1[is.na(df1$qty)]
df1[is.na(df1$qty):]
df1[is.na(df1$qty) == true]
df1[is.na(df1$qty) == TRUE]
is.na(df1$qty)
is.na(df1$qty) == TRUE
df1[is.na(df1$qty) == TRUE, ]
df1[is.na(df1$qty) == TRUE, ]
df1
df1[which(is.na(df1$qty) == TRUE), ]
df1[, !RATIO]
# read from excel file
df1 <-  read_excel("./dataset/pd_sales.xlsx", sheet = "Sheet1")
df1[, !RATIO]
stf(df1)
str(df1)
df1[, !RATIO]
df1[, !"RATIO "]
df1 <- subset(df1, select = c(level1, level2, YR2016, YR2017))
str(df1)
df1 <- subset(df1, select = c(level1, level2, YR2016, YR2017))
names(df1)
# 转换成数字
df1$YR2016 = as.numeric(df1$YR2016)
df1$YR2017 = as.numeric(df1$YR2017)
df1 <- gather(df1, key="year", value="qty", -level1, -level2)
df1$qty = as.numeric(df1$qty)
df1
df1[which(is.na(df1$qty) == TRUE), ]
shiny::runApp('r/01.sales')
shiny::runApp('r/01.sales')
runApp('r/01.sales')
shiny::runApp()
runApp()
shiny::runApp()
